version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: budget-tracker-db
    environment:
      POSTGRES_DB: budget_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: budget-tracker-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service (Go)
  backend:
    build: 
      context: ./services/backend
      dockerfile: Dockerfile
    container_name: budget-tracker-backend
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: postgres://postgres:password@postgres:5432/budget_tracker?sslmode=disable
      REDIS_URL: redis://redis:6379
      ENVIRONMENT: development
      JWT_SECRET: your-secret-key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Service (Python)
  ai:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
    container_name: budget-tracker-ai
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: postgres://postgres:password@postgres:5432/budget_tracker?sslmode=disable
      REDIS_URL: redis://redis:6379
      ENVIRONMENT: development
      # Add your API keys here or use .env file
      # OPENAI_API_KEY: your-openai-key
      # ANTHROPIC_API_KEY: your-anthropic-key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/ai:/app
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: budget-tracker-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - ai
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: budget-tracker-network